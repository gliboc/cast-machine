let make_stream = fun hd thunk -> (hd, thunk) in

let stream_first st = fst st in

let stream_rest st = (snd st) () in

let stream_unfold st = 
    (stream_first st, stream_rest st) in

let rec stream_get = fun st i ->
    if i then stream_first st
    else stream_get (stream_rest st) (i-1) in

let rec count_from n = 
    make_stream n (fun () -> count_from (n+1)) in

let rec sift = fun n st ->
    let hd = stream_first st in 
    let tl = stream_rest st in
    if (hd mod n) then sift n tl 
    else make_stream hd (fun () -> sift n tl) in

let rec sieve = fun st ->
    let hd = stream_first st in 
    let tl = stream_rest st in
    make_stream hd (fun () -> sieve (sift hd tl)) in

let primes = sieve (count_from 2) in

let n = 1000 in 

stream_get primes n;;